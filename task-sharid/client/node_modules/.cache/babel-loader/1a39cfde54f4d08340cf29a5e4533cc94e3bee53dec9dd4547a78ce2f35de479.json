{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91892\\\\OneDrive\\\\Desktop\\\\task-sharid\\\\task-sharid\\\\client\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [deviceUpdates, setDeviceUpdates] = useState([]);\n  const [telemetryUpdates, setTelemetryUpdates] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    if (user && !socket) {\n      // Initialize socket connection only if user exists and no socket is active\n      const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n      const newSocket = io(socketUrl, {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        transports: ['websocket', 'polling'],\n        forceNew: false,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      // Connection event handlers\n      newSocket.on('connect', () => {\n        console.log('✅ Connected to server');\n        setConnected(true);\n        toast.success('Connected to real-time updates', {\n          duration: 2000,\n          icon: '🔌'\n        });\n      });\n      newSocket.on('disconnect', () => {\n        console.log('🔌 Disconnected from server');\n        setConnected(false);\n        toast.error('Disconnected from real-time updates', {\n          duration: 2000,\n          icon: '🔌'\n        });\n      });\n      newSocket.on('connect_error', error => {\n        console.error('❌ Socket connection error:', error);\n        setConnected(false);\n      });\n\n      // Device update handlers\n      newSocket.on('device:update', data => {\n        console.log('📱 Device update received:', data);\n        setDeviceUpdates(prev => {\n          const updated = [...prev];\n          const existingIndex = updated.findIndex(update => update.deviceId === data.deviceId);\n          if (existingIndex >= 0) {\n            updated[existingIndex] = {\n              ...data,\n              timestamp: new Date()\n            };\n          } else {\n            updated.push({\n              ...data,\n              timestamp: new Date()\n            });\n          }\n\n          // Keep only last 50 updates\n          return updated.slice(-50);\n        });\n      });\n\n      // Telemetry update handlers\n      newSocket.on('telemetry:new', data => {\n        console.log('📊 New telemetry received:', data);\n        setTelemetryUpdates(prev => {\n          const updated = [{\n            ...data,\n            timestamp: new Date()\n          }, ...prev];\n          // Keep only last 100 updates\n          return updated.slice(0, 100);\n        });\n\n        // Show toast notification for new readings\n        if (data.data) {\n          toast.success(`New reading from ${data.deviceId}: ${data.data.temperature}°C, ${data.data.humidity}% RH`, {\n            duration: 3000,\n            icon: '📊'\n          });\n        }\n      });\n\n      // System notifications\n      newSocket.on('system:notification', data => {\n        console.log('🔔 System notification:', data);\n        switch (data.type) {\n          case 'device_online':\n            toast.success(`Device ${data.deviceId} is now online`, {\n              icon: '🟢'\n            });\n            break;\n          case 'device_offline':\n            toast.error(`Device ${data.deviceId} went offline`, {\n              icon: '🔴'\n            });\n            break;\n          case 'alert':\n            toast.error(data.message, {\n              icon: '⚠️',\n              duration: 5000\n            });\n            break;\n          default:\n            toast(data.message, {\n              icon: '🔔'\n            });\n        }\n      });\n      setSocket(newSocket);\n\n      // Cleanup on unmount\n      return () => {\n        console.log('🧹 Cleaning up socket connection');\n        newSocket.disconnect();\n        setSocket(null);\n        setConnected(false);\n      };\n    } else if (!user && socket) {\n      // Disconnect when user logs out\n      console.log('🔓 User logged out, disconnecting socket');\n      socket.disconnect();\n      setSocket(null);\n      setConnected(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Helper functions\n  const emitEvent = (event, data) => {\n    if (socket && connected) {\n      socket.emit(event, data);\n    } else {\n      console.warn('Socket not connected, cannot emit event:', event);\n    }\n  };\n  const subscribeToDevice = deviceId => {\n    if (socket && connected) {\n      socket.emit('subscribe:device', {\n        deviceId\n      });\n      console.log(`📱 Subscribed to device: ${deviceId}`);\n    }\n  };\n  const unsubscribeFromDevice = deviceId => {\n    if (socket && connected) {\n      socket.emit('unsubscribe:device', {\n        deviceId\n      });\n      console.log(`📱 Unsubscribed from device: ${deviceId}`);\n    }\n  };\n  const clearUpdates = () => {\n    setDeviceUpdates([]);\n    setTelemetryUpdates([]);\n  };\n  const getLatestTelemetryForDevice = deviceId => {\n    return telemetryUpdates.find(update => update.deviceId === deviceId);\n  };\n  const getDeviceStatus = deviceId => {\n    const deviceUpdate = deviceUpdates.find(update => update.deviceId === deviceId);\n    if (!deviceUpdate) return 'unknown';\n    const timeDiff = new Date() - new Date(deviceUpdate.lastSeen || deviceUpdate.timestamp);\n    const minutesAgo = timeDiff / (1000 * 60);\n    if (minutesAgo < 5) return 'online';\n    if (minutesAgo < 30) return 'warning';\n    return 'offline';\n  };\n  const value = {\n    socket,\n    connected,\n    deviceUpdates,\n    telemetryUpdates,\n    emitEvent,\n    subscribeToDevice,\n    unsubscribeFromDevice,\n    clearUpdates,\n    getLatestTelemetryForDevice,\n    getDeviceStatus\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"WqQ3DUAavz0BeQft7UyMRx+nqTQ=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","toast","useAuth","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","connected","setConnected","deviceUpdates","setDeviceUpdates","telemetryUpdates","setTelemetryUpdates","user","socketUrl","process","env","REACT_APP_SOCKET_URL","newSocket","auth","token","localStorage","getItem","transports","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","success","duration","icon","error","data","prev","updated","existingIndex","findIndex","update","deviceId","timestamp","Date","push","slice","temperature","humidity","type","message","disconnect","emitEvent","event","emit","warn","subscribeToDevice","unsubscribeFromDevice","clearUpdates","getLatestTelemetryForDevice","find","getDeviceStatus","deviceUpdate","timeDiff","lastSeen","minutesAgo","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91892/OneDrive/Desktop/task-sharid/task-sharid/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\n\nconst SocketContext = createContext();\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [deviceUpdates, setDeviceUpdates] = useState([]);\n  const [telemetryUpdates, setTelemetryUpdates] = useState([]);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user && !socket) {\n      // Initialize socket connection only if user exists and no socket is active\n      const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n      const newSocket = io(socketUrl, {\n        auth: {\n          token: localStorage.getItem('token')\n        },\n        transports: ['websocket', 'polling'],\n        forceNew: false,\n        reconnection: true,\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000\n      });\n\n      // Connection event handlers\n      newSocket.on('connect', () => {\n        console.log('✅ Connected to server');\n        setConnected(true);\n        toast.success('Connected to real-time updates', {\n          duration: 2000,\n          icon: '🔌'\n        });\n      });\n\n      newSocket.on('disconnect', () => {\n        console.log('🔌 Disconnected from server');\n        setConnected(false);\n        toast.error('Disconnected from real-time updates', {\n          duration: 2000,\n          icon: '🔌'\n        });\n      });\n\n      newSocket.on('connect_error', (error) => {\n        console.error('❌ Socket connection error:', error);\n        setConnected(false);\n      });\n\n      // Device update handlers\n      newSocket.on('device:update', (data) => {\n        console.log('📱 Device update received:', data);\n        setDeviceUpdates(prev => {\n          const updated = [...prev];\n          const existingIndex = updated.findIndex(update => update.deviceId === data.deviceId);\n          \n          if (existingIndex >= 0) {\n            updated[existingIndex] = { ...data, timestamp: new Date() };\n          } else {\n            updated.push({ ...data, timestamp: new Date() });\n          }\n          \n          // Keep only last 50 updates\n          return updated.slice(-50);\n        });\n      });\n\n      // Telemetry update handlers\n      newSocket.on('telemetry:new', (data) => {\n        console.log('📊 New telemetry received:', data);\n        setTelemetryUpdates(prev => {\n          const updated = [{ ...data, timestamp: new Date() }, ...prev];\n          // Keep only last 100 updates\n          return updated.slice(0, 100);\n        });\n\n        // Show toast notification for new readings\n        if (data.data) {\n          toast.success(\n            `New reading from ${data.deviceId}: ${data.data.temperature}°C, ${data.data.humidity}% RH`,\n            {\n              duration: 3000,\n              icon: '📊'\n            }\n          );\n        }\n      });\n\n      // System notifications\n      newSocket.on('system:notification', (data) => {\n        console.log('🔔 System notification:', data);\n        \n        switch (data.type) {\n          case 'device_online':\n            toast.success(`Device ${data.deviceId} is now online`, {\n              icon: '🟢'\n            });\n            break;\n          case 'device_offline':\n            toast.error(`Device ${data.deviceId} went offline`, {\n              icon: '🔴'\n            });\n            break;\n          case 'alert':\n            toast.error(data.message, {\n              icon: '⚠️',\n              duration: 5000\n            });\n            break;\n          default:\n            toast(data.message, {\n              icon: '🔔'\n            });\n        }\n      });\n\n      setSocket(newSocket);\n\n      // Cleanup on unmount\n      return () => {\n        console.log('🧹 Cleaning up socket connection');\n        newSocket.disconnect();\n        setSocket(null);\n        setConnected(false);\n      };\n    } else if (!user && socket) {\n      // Disconnect when user logs out\n      console.log('🔓 User logged out, disconnecting socket');\n      socket.disconnect();\n      setSocket(null);\n      setConnected(false);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  // Helper functions\n  const emitEvent = (event, data) => {\n    if (socket && connected) {\n      socket.emit(event, data);\n    } else {\n      console.warn('Socket not connected, cannot emit event:', event);\n    }\n  };\n\n  const subscribeToDevice = (deviceId) => {\n    if (socket && connected) {\n      socket.emit('subscribe:device', { deviceId });\n      console.log(`📱 Subscribed to device: ${deviceId}`);\n    }\n  };\n\n  const unsubscribeFromDevice = (deviceId) => {\n    if (socket && connected) {\n      socket.emit('unsubscribe:device', { deviceId });\n      console.log(`📱 Unsubscribed from device: ${deviceId}`);\n    }\n  };\n\n  const clearUpdates = () => {\n    setDeviceUpdates([]);\n    setTelemetryUpdates([]);\n  };\n\n  const getLatestTelemetryForDevice = (deviceId) => {\n    return telemetryUpdates.find(update => update.deviceId === deviceId);\n  };\n\n  const getDeviceStatus = (deviceId) => {\n    const deviceUpdate = deviceUpdates.find(update => update.deviceId === deviceId);\n    if (!deviceUpdate) return 'unknown';\n    \n    const timeDiff = new Date() - new Date(deviceUpdate.lastSeen || deviceUpdate.timestamp);\n    const minutesAgo = timeDiff / (1000 * 60);\n    \n    if (minutesAgo < 5) return 'online';\n    if (minutesAgo < 30) return 'warning';\n    return 'offline';\n  };\n\n  const value = {\n    socket,\n    connected,\n    deviceUpdates,\n    telemetryUpdates,\n    emitEvent,\n    subscribeToDevice,\n    unsubscribeFromDevice,\n    clearUpdates,\n    getLatestTelemetryForDevice,\n    getDeviceStatus\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}