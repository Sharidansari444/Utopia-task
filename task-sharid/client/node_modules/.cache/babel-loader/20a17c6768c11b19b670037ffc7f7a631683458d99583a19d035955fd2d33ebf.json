{"ast":null,"code":"import axios from 'axios';\n\n// Configure axios defaults\naxios.defaults.baseURL = process.env.REACT_APP_API_URL || '/api';\n\n// Add request interceptor to include auth token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\naxios.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API\nexport const authAPI = {\n  // Login user\n  login: async (email, password) => {\n    const response = await axios.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  // Register user\n  register: async (name, email, password) => {\n    const response = await axios.post('/auth/register', {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    const response = await axios.get('/auth/me');\n    return response.data;\n  },\n  // Logout user\n  logout: async () => {\n    const response = await axios.post('/auth/logout');\n    return response.data;\n  }\n};\n\n// Devices API\nexport const devicesAPI = {\n  // Get all devices with pagination and filters\n  getDevices: async (params = {}) => {\n    const response = await axios.get('/devices', {\n      params\n    });\n    return response.data;\n  },\n  // Get single device by ID or UID\n  getDevice: async id => {\n    const response = await axios.get(`/devices/${id}`);\n    return response.data;\n  },\n  // Get device telemetry data\n  getDeviceTelemetry: async (deviceId, params = {}) => {\n    const response = await axios.get(`/devices/${deviceId}/data`, {\n      params\n    });\n    return response.data;\n  },\n  // Create new device\n  createDevice: async deviceData => {\n    const response = await axios.post('/devices', deviceData);\n    return response.data;\n  },\n  // Update device\n  updateDevice: async (id, deviceData) => {\n    const response = await axios.put(`/devices/${id}`, deviceData);\n    return response.data;\n  },\n  // Delete device\n  deleteDevice: async id => {\n    const response = await axios.delete(`/devices/${id}`);\n    return response.data;\n  },\n  // Get device statistics summary\n  getDeviceStats: async () => {\n    const response = await axios.get('/devices/stats/summary');\n    return response.data;\n  }\n};\n\n// Telemetry API\nexport const telemetryAPI = {\n  // Get telemetry data with filters\n  getTelemetry: async (params = {}) => {\n    const response = await axios.get('/telemetry', {\n      params\n    });\n    return response.data;\n  },\n  // Get telemetry by device\n  getTelemetryByDevice: async (deviceId, params = {}) => {\n    const response = await axios.get(`/telemetry/device/${deviceId}`, {\n      params\n    });\n    return response.data;\n  },\n  // Create telemetry data\n  createTelemetry: async telemetryData => {\n    const response = await axios.post('/telemetry', telemetryData);\n    return response.data;\n  },\n  // Get telemetry statistics\n  getTelemetryStats: async (params = {}) => {\n    const response = await axios.get('/telemetry/stats', {\n      params\n    });\n    return response.data;\n  }\n};\n\n// Health check API\nexport const healthAPI = {\n  // Check server health\n  checkHealth: async () => {\n    const response = await axios.get('/health');\n    return response.data;\n  }\n};\n\n// Export default axios instance for custom requests\nexport default axios;","map":{"version":3,"names":["axios","defaults","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","email","password","post","data","register","name","getCurrentUser","get","logout","devicesAPI","getDevices","params","getDevice","id","getDeviceTelemetry","deviceId","createDevice","deviceData","updateDevice","put","deleteDevice","delete","getDeviceStats","telemetryAPI","getTelemetry","getTelemetryByDevice","createTelemetry","telemetryData","getTelemetryStats","healthAPI","checkHealth"],"sources":["C:/Users/91892/OneDrive/Desktop/task-sharid/task-sharid/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configure axios defaults\naxios.defaults.baseURL = process.env.REACT_APP_API_URL || '/api';\n\n// Add request interceptor to include auth token\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle auth errors\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API\nexport const authAPI = {\n  // Login user\n  login: async (email, password) => {\n    const response = await axios.post('/auth/login', { email, password });\n    return response.data;\n  },\n\n  // Register user\n  register: async ( name, email, password) => {\n    const response = await axios.post('/auth/register', {  name, email, password});\n    return response.data;\n  },\n\n  // Get current user\n  getCurrentUser: async () => {\n    const response = await axios.get('/auth/me');\n    return response.data;\n  },\n\n  // Logout user\n  logout: async () => {\n    const response = await axios.post('/auth/logout');\n    return response.data;\n  }\n};\n\n// Devices API\nexport const devicesAPI = {\n  // Get all devices with pagination and filters\n  getDevices: async (params = {}) => {\n    const response = await axios.get('/devices', { params });\n    return response.data;\n  },\n\n  // Get single device by ID or UID\n  getDevice: async (id) => {\n    const response = await axios.get(`/devices/${id}`);\n    return response.data;\n  },\n\n  // Get device telemetry data\n  getDeviceTelemetry: async (deviceId, params = {}) => {\n    const response = await axios.get(`/devices/${deviceId}/data`, { params });\n    return response.data;\n  },\n\n  // Create new device\n  createDevice: async (deviceData) => {\n    const response = await axios.post('/devices', deviceData);\n    return response.data;\n  },\n\n  // Update device\n  updateDevice: async (id, deviceData) => {\n    const response = await axios.put(`/devices/${id}`, deviceData);\n    return response.data;\n  },\n\n  // Delete device\n  deleteDevice: async (id) => {\n    const response = await axios.delete(`/devices/${id}`);\n    return response.data;\n  },\n\n  // Get device statistics summary\n  getDeviceStats: async () => {\n    const response = await axios.get('/devices/stats/summary');\n    return response.data;\n  }\n};\n\n// Telemetry API\nexport const telemetryAPI = {\n  // Get telemetry data with filters\n  getTelemetry: async (params = {}) => {\n    const response = await axios.get('/telemetry', { params });\n    return response.data;\n  },\n\n  // Get telemetry by device\n  getTelemetryByDevice: async (deviceId, params = {}) => {\n    const response = await axios.get(`/telemetry/device/${deviceId}`, { params });\n    return response.data;\n  },\n\n  // Create telemetry data\n  createTelemetry: async (telemetryData) => {\n    const response = await axios.post('/telemetry', telemetryData);\n    return response.data;\n  },\n\n  // Get telemetry statistics\n  getTelemetryStats: async (params = {}) => {\n    const response = await axios.get('/telemetry/stats', { params });\n    return response.data;\n  }\n};\n\n// Health check API\nexport const healthAPI = {\n  // Check server health\n  checkHealth: async () => {\n    const response = await axios.get('/health');\n    return response.data;\n  }\n};\n\n// Export default axios instance for custom requests\nexport default axios;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}